DPJRuntime.DPJArrayInt.DPJArrayInt(int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.DPJArrayInt(int[]<R>) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.DPJArrayInt(int[]<R>,int,int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.get(int) reads R
DPJRuntime.DPJArrayInt.put(int,int) writes R
DPJRuntime.DPJArrayInt.subarray(int,int) pure
DPJRuntime.DPJArrayInt.swap(int,int) writes R
DPJRuntime.DPJArrayInt.toArray() pure
DPJRuntime.DPJArrayInt.toString() invokes DPJRuntime.DPJArrayInt.get(int) where { R -> R }, java.lang.StringBuffer.append(int) where { this -> Root : * }, java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * } overrides java.lang.Object.toString()
DPJRuntime.DPJPartitionInt.<>DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int[]<RA>) reads RA writes this : [?] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.<>stridedPartition(DPJRuntime.DPJArrayInt<R>,int) pure
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int,boolean) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int,double) invokes java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.get(int) reads this : [idx] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }
DPJRuntime.DPJUtils.<>permuteInt(int[]<R>) writes R invokes java.lang.Math.random() where { this -> Root : * }
DPJRuntime.DPJUtils.<>print(int[]<R>) invokes java.io.PrintStream.print(java.lang.String) where { this -> Root : * }
DPJRuntime.DPJUtils.<T>permute(T[]<R>) invokes DPJRuntime.DPJUtils.<T>swap(T[]<R>,int,int) where { this -> Root : *, R -> R }, java.lang.Math.random() where { this -> Root : * }
DPJRuntime.DPJUtils.<T>print(T[]<R>) invokes java.io.PrintStream.print(java.lang.String) where { this -> Root : * }
DPJRuntime.DPJUtils.<T>swap(T[]<R>,int,int) writes R
DPJRuntime.DPJUtils.DPJUtils() invokes java.lang.Object.Object()
DPJRuntime.DPJUtils.log2(int) pure
Harness.Harness(java.lang.String,java.lang.String[]) invokes Harness.Harness(java.lang.String,java.lang.String[],int,int)
Harness.Harness(java.lang.String,java.lang.String[],int,int) writes Root invokes Harness.usage(), java.lang.Integer.parseInt(java.lang.String) where { this -> Root : * }, java.lang.Object.Object(), java.lang.System.exit(int) where { this -> Root : * }
Harness.initialize() pure
Harness.run() reads Root invokes Harness.initialize(), Harness.runCleanup(), Harness.runTest(), Harness.runWork(), Harness.usage(), java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.String.equals(java.lang.Object) where { this -> Root : * }, java.lang.System.exit(int) where { this -> Root : * }, java.lang.System.nanoTime() where { this -> Root : * }
Harness.runCleanup() pure
Harness.runTest() pure
Harness.runWork() pure
Harness.usage() reads Root invokes java.io.PrintStream.println(java.lang.String) where { this -> Root : * }
MergeSort.<>checkSorted(int[]<P>,int) reads P
MergeSort.<>findSplit(int,DPJRuntime.DPJArrayInt<P>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> P : *, R -> P }
MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> P1 : *, R -> P1 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> P1 : *, R -> P1 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> P2 : *, R -> P2 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> P3 : *, R -> P3 }, MergeSort.<>findSplit(int,DPJRuntime.DPJArrayInt<P>) where { P -> P2 }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> P1 : *, P2 -> P2 : *, P3 -> P3 : * }, MergeSort.<>sequentialMerge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> P1, P2 -> P2, P3 -> P3 }
MergeSort.<>quickSort(DPJRuntime.DPJArrayInt<R>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> R : *, R -> R }, DPJRuntime.DPJArrayInt.put(int,int) where { this -> R : *, R -> R }, DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, MergeSort.<>quickSort(DPJRuntime.DPJArrayInt<R>) where { R -> R }
MergeSort.<>sequentialMerge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> P1 : *, R -> P1 }, DPJRuntime.DPJArrayInt.get(int) where { this -> P2 : *, R -> P2 }, DPJRuntime.DPJArrayInt.put(int,int) where { this -> P3 : *, R -> P3 }
MergeSort.<>sort(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>) pure
MergeSort.MergeSort(java.lang.String,java.lang.String[]) invokes Harness.Harness(java.lang.String,java.lang.String[])
MergeSort.initialize() writes Root, Root : MergeSort.Input invokes DPJRuntime.DPJUtils.<>permuteInt(int[]<R>) where { this -> Root : *, R -> Root : MergeSort.Input } overrides Harness.initialize()
MergeSort.runTest() reads Root invokes MergeSort.<>checkSorted(int[]<P>,int) where { P -> Root : MergeSort.Input } overrides Harness.runTest()
MergeSort.runWork() reads Root invokes MergeSort.<>sort(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>) where { P1 -> Root : MergeSort.Input, P2 -> Root : MergeSort.Result } overrides Harness.runWork()
MergeSort8.<>sort(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>) invokes MergeSort8.<>sort(DPJRuntime.DPJArrayInt<P3>,DPJRuntime.DPJArrayInt<P4>,boolean) where { P3 -> P1, P4 -> P2 } overrides MergeSort.<>sort(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>) where { P1 -> P1, P2 -> P2 }
MergeSort8.<>sort(DPJRuntime.DPJArrayInt<P3>,DPJRuntime.DPJArrayInt<P4>,boolean) invokes DPJRuntime.DPJPartitionInt.get(int) where { this -> P3 : *, R -> P3 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> P4 : *, R -> P4 }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> P3 : *, P2 -> P3 : *, P3 -> P4 }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> P4 : *, P2 -> P4 : *, P3 -> P3 }, MergeSort.<>quickSort(DPJRuntime.DPJArrayInt<R>) where { R -> P3 }, MergeSort.<>quickSort(DPJRuntime.DPJArrayInt<R>) where { R -> P4 }, MergeSort8.<>sort(DPJRuntime.DPJArrayInt<P3>,DPJRuntime.DPJArrayInt<P4>,boolean) where { P3 -> P3 : *, P4 -> P4 : * }, MergeSort8.<>sort_halves(DPJRuntime.DPJPartitionInt<P7>,DPJRuntime.DPJPartitionInt<P8>) where { this -> Root : *, P7 -> P3, P8 -> P4 }, MergeSort8.<>sort_halves(DPJRuntime.DPJPartitionInt<P7>,DPJRuntime.DPJPartitionInt<P8>) where { this -> Root : *, P7 -> P4, P8 -> P3 }, MergeSort8.<>sort_quarters(DPJRuntime.DPJPartitionInt<P5>,DPJRuntime.DPJPartitionInt<P6>) where { this -> Root : *, P5 -> P3, P6 -> P4 }, MergeSort8.<>sort_quarters(DPJRuntime.DPJPartitionInt<P5>,DPJRuntime.DPJPartitionInt<P6>) where { this -> Root : *, P5 -> P4, P6 -> P3 }
MergeSort8.<>sort_halves(DPJRuntime.DPJPartitionInt<P7>,DPJRuntime.DPJPartitionInt<P8>) invokes DPJRuntime.DPJPartitionInt.get(int) where { this -> halves, R -> P8 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> quarters, R -> P7 }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> quarters : [0] : *, P2 -> quarters : [1] : *, P3 -> halves : [0] : * }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> quarters : [2] : *, P2 -> quarters : [3] : *, P3 -> halves : [1] : * }
MergeSort8.<>sort_quarters(DPJRuntime.DPJPartitionInt<P5>,DPJRuntime.DPJPartitionInt<P6>) invokes DPJRuntime.DPJPartitionInt.get(int) where { this -> A_eighths, R -> P5 }, DPJRuntime.DPJPartitionInt.get(int) where { this -> B_quarters, R -> P6 }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> A_eighths : [0] : *, P2 -> A_eighths : [1] : *, P3 -> B_quarters : [0] : * }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> A_eighths : [2] : *, P2 -> A_eighths : [3] : *, P3 -> B_quarters : [1] : * }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> A_eighths : [4] : *, P2 -> A_eighths : [5] : *, P3 -> B_quarters : [2] : * }, MergeSort.<>merge(DPJRuntime.DPJArrayInt<P1>,DPJRuntime.DPJArrayInt<P2>,DPJRuntime.DPJArrayInt<P3>) where { P1 -> A_eighths : [6] : *, P2 -> A_eighths : [7] : *, P3 -> B_quarters : [3] : * }
MergeSort8.MergeSort8(java.lang.String[]) invokes MergeSort.MergeSort(java.lang.String,java.lang.String[])
MergeSort8.main(java.lang.String[]) invokes Harness.run() where { this -> Root : * }
