DPJRuntime.DPJArrayChar.DPJArrayChar(char[]<R>) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayChar.DPJArrayChar(char[]<R>,int,int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayChar.DPJArrayChar(int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayChar.get(int) reads R
DPJRuntime.DPJArrayChar.put(int,char) writes R
DPJRuntime.DPJArrayChar.subarray(int,int) pure
DPJRuntime.DPJArrayChar.swap(int,int) writes R
DPJRuntime.DPJArrayChar.toArray() pure
DPJRuntime.DPJArrayChar.toString() invokes DPJRuntime.DPJArrayChar.get(int) where { R -> R }, java.lang.StringBuffer.append(char) where { this -> Root : * }, java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * } overrides java.lang.Object.toString()
DPJRuntime.DPJArrayInt.DPJArrayInt(int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.DPJArrayInt(int[]<R>) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.DPJArrayInt(int[]<R>,int,int) invokes java.lang.Object.Object()
DPJRuntime.DPJArrayInt.get(int) reads R
DPJRuntime.DPJArrayInt.put(int,int) writes R
DPJRuntime.DPJArrayInt.subarray(int,int) pure
DPJRuntime.DPJArrayInt.swap(int,int) writes R
DPJRuntime.DPJArrayInt.toArray() pure
DPJRuntime.DPJArrayInt.toString() invokes DPJRuntime.DPJArrayInt.get(int) where { R -> R }, java.lang.StringBuffer.append(int) where { this -> Root : * }, java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * } overrides java.lang.Object.toString()
DPJRuntime.DPJHashSet.DPJHashSet() invokes java.lang.Object.Object()
DPJRuntime.DPJHashSet.add(E) reads R invokes DPJRuntime.DPJSetWrapper.add(E) where { this -> R : *, R -> R } overrides DPJRuntime.DPJSet.add(E) where { R -> R }
DPJRuntime.DPJHashSet.clear() reads R invokes DPJRuntime.DPJSetWrapper.clear() where { this -> R : *, R -> R } overrides DPJRuntime.DPJSet.clear() where { R -> R }
DPJRuntime.DPJHashSet.iterator() reads R invokes DPJRuntime.DPJSetWrapper.iterator() where { this -> R : *, R -> R } overrides DPJRuntime.DPJSet.iterator() where { R -> R }
DPJRuntime.DPJHashSet.main(java.lang.String[]) invokes DPJRuntime.DPJSet.add(E) where { this -> Root : *, R -> Root }, DPJRuntime.DPJSet.iterator() where { this -> Root : *, R -> Root }, java.io.PrintStream.println(java.lang.Object) where { this -> Root : * }
DPJRuntime.DPJHashSet.size() reads R invokes DPJRuntime.DPJSetWrapper.size() where { this -> R : *, R -> R } overrides DPJRuntime.DPJSet.size() where { R -> R }
DPJRuntime.DPJIterator.get(int) pure
DPJRuntime.DPJIterator.hasNext() pure
DPJRuntime.DPJIterator.next() pure
DPJRuntime.DPJIterator.remove() pure
DPJRuntime.DPJIterator.size() pure
DPJRuntime.DPJPair.DPJPair(T1,T2) writes R invokes java.lang.Object.Object()
DPJRuntime.DPJPair.toString() reads R invokes java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * } overrides java.lang.Object.toString()
DPJRuntime.DPJPartitionChar.<>DPJPartitionChar(DPJRuntime.DPJArrayChar<R>,int[]<RA>) reads RA writes this : [?] invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionChar.<>stridedPartition(DPJRuntime.DPJArrayChar<R>,int) pure
DPJRuntime.DPJPartitionChar.DPJPartitionChar(DPJRuntime.DPJArrayChar<R>,int) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionChar.DPJPartitionChar(DPJRuntime.DPJArrayChar<R>,int,boolean) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionChar.DPJPartitionChar(DPJRuntime.DPJArrayChar<R>,int,double) invokes java.lang.Object.Object()
DPJRuntime.DPJPartitionChar.get(int) reads this : [idx] invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> R : *, R -> R }
DPJRuntime.DPJPartitionInt.<>DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int[]<RA>) reads RA writes this : [?] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.<>stridedPartition(DPJRuntime.DPJArrayInt<R>,int) pure
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int,boolean) writes this : [0], this : [1] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }, java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.DPJPartitionInt(DPJRuntime.DPJArrayInt<R>,int,double) invokes java.lang.Object.Object()
DPJRuntime.DPJPartitionInt.get(int) reads this : [idx] invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> R : *, R -> R }
DPJRuntime.DPJSet.add(E) pure
DPJRuntime.DPJSet.clear() pure
DPJRuntime.DPJSet.iterator() pure
DPJRuntime.DPJSet.size() pure
DPJRuntime.DPJSetWrapper.DPJSetWrapper(java.util.Set<E>) writes R invokes java.lang.Object.Object()
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.DPJSetWrapperIterator() writes R invokes java.lang.Object.Object(), java.util.Set.iterator() where { this -> Root : * }
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.get(int) reads R invokes DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.next() where { R -> R }, java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.System.exit(int) where { this -> Root : * } overrides DPJRuntime.DPJIterator.get(int) where { R -> R }
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.hasNext() reads R invokes java.util.Iterator.hasNext() where { this -> Root : * } overrides DPJRuntime.DPJIterator.hasNext() where { R -> R }
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.next() reads R invokes java.util.Iterator.next() where { this -> Root : * } overrides DPJRuntime.DPJIterator.next() where { R -> R }
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.remove() reads R invokes java.util.Iterator.remove() where { this -> Root : * } overrides DPJRuntime.DPJIterator.remove() where { R -> R }
DPJRuntime.DPJSetWrapper.DPJSetWrapperIterator.size() reads R invokes java.util.Set.size() where { this -> Root : * } overrides DPJRuntime.DPJIterator.size() where { R -> R }
DPJRuntime.DPJSetWrapper.add(E) reads R invokes java.util.Set.add(E) where { this -> Root : * } overrides DPJRuntime.DPJSet.add(E) where { R -> R }
DPJRuntime.DPJSetWrapper.clear() reads R invokes java.util.Set.clear() where { this -> Root : * } overrides DPJRuntime.DPJSet.clear() where { R -> R }
DPJRuntime.DPJSetWrapper.iterator() overrides DPJRuntime.DPJSet.iterator() where { R -> R }
DPJRuntime.DPJSetWrapper.main(java.lang.String[]) invokes DPJRuntime.DPJSet.add(E) where { this -> Root : *, R -> Root }, DPJRuntime.DPJSet.iterator() where { this -> Root : *, R -> Root }, java.io.PrintStream.println(java.lang.Object) where { this -> Root : * }
DPJRuntime.DPJSetWrapper.size() reads R invokes java.util.Set.size() where { this -> Root : * } overrides DPJRuntime.DPJSet.size() where { R -> R }
DPJRuntime.DPJSparseArray.DPJSparseArray(int,T) invokes java.lang.Object.Object()
DPJRuntime.DPJSparseArray.DPJSparseArray(java.util.SortedMap<java.lang.Integer,T>,int,int,T) invokes java.lang.Object.Object()
DPJRuntime.DPJSparseArray.clear() invokes java.util.Map.clear() where { this -> Root : * }
DPJRuntime.DPJSparseArray.get(int) invokes java.util.Map.get(java.lang.Object) where { this -> Root : * }
DPJRuntime.DPJSparseArray.main(java.lang.String[]) invokes DPJRuntime.DPJSparseArray.put(int,T) where { this -> Root : *, R -> Root }, DPJRuntime.DPJSparseArray.subarray(int,int) where { this -> Root : *, R -> Root }, java.io.PrintStream.println(java.lang.Object) where { this -> Root : * }
DPJRuntime.DPJSparseArray.nonZeroIndices() invokes java.util.SortedMap.keySet() where { this -> Root : * }, java.util.SortedMap.subMap(K,K) where { this -> Root : * }
DPJRuntime.DPJSparseArray.put(int,T) invokes java.util.Map.put(K,V) where { this -> Root : * }
DPJRuntime.DPJSparseArray.subarray(int,int) pure
DPJRuntime.DPJSparseArray.toString() invokes DPJRuntime.DPJIterator.hasNext() where { this -> R : *, R -> R }, DPJRuntime.DPJIterator.next() where { this -> R : *, R -> R }, DPJRuntime.DPJSet.iterator() where { this -> R : *, R -> R }, DPJRuntime.DPJSparseArray.get(int) where { R -> R }, DPJRuntime.DPJSparseArray.nonZeroIndices() where { R -> R }, java.lang.StringBuffer.append(int) where { this -> Root : * }, java.lang.StringBuffer.append(java.lang.Object) where { this -> Root : * }, java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * } overrides java.lang.Object.toString()
DPJRuntime.DPJUtils.<>permuteInt(int[]<R15>) writes R15 invokes java.lang.Math.random() where { this -> Root : * }
DPJRuntime.DPJUtils.<>print(int[]<R17>) invokes java.io.PrintStream.print(java.lang.String) where { this -> Root : * }
DPJRuntime.DPJUtils.<T6>swap(T6[]<R13>,int,int) writes R13
DPJRuntime.DPJUtils.<T7>permute(T7[]<R14>) invokes DPJRuntime.DPJUtils.<T6>swap(T6[]<R13>,int,int) where { this -> Root : *, R13 -> R14 }, java.lang.Math.random() where { this -> Root : * }
DPJRuntime.DPJUtils.<T8>print(T8[]<R16>) invokes java.io.PrintStream.print(java.lang.String) where { this -> Root : * }
DPJRuntime.DPJUtils.DPJUtils() invokes java.lang.Object.Object()
DPJRuntime.DPJUtils.log2(int) pure
Harness.Harness(java.lang.String,java.lang.String[]) invokes Harness.Harness(java.lang.String,java.lang.String[],int,int)
Harness.Harness(java.lang.String,java.lang.String[],int,int) writes Root invokes Harness.usage(), java.lang.Integer.parseInt(java.lang.String) where { this -> Root : * }, java.lang.Object.Object(), java.lang.System.exit(int) where { this -> Root : * }
Harness.initialize() pure
Harness.run() reads Root invokes Harness.initialize(), Harness.runCleanup(), Harness.runTest(), Harness.runWork(), Harness.usage(), java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.String.equals(java.lang.Object) where { this -> Root : * }, java.lang.System.exit(int) where { this -> Root : * }, java.lang.System.nanoTime() where { this -> Root : * }
Harness.runCleanup() pure
Harness.runTest() pure
Harness.runWork() pure
Harness.usage() reads Root invokes java.io.PrintStream.println(java.lang.String) where { this -> Root : * }
StringMatching.<>checkIdx(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,int) reads Root : StringMatching.SM invokes DPJRuntime.DPJArrayChar.get(int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayChar.get(int) where { this -> Text : *, R -> Text }
StringMatching.<>checkSegment(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) invokes StringMatching.<>checkIdx(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,int) where { Text -> Text, Pat -> Pat }, StringMatching.<>getNegIdx(DPJRuntime.DPJArrayInt<R>) where { R -> Wit }
StringMatching.<>computeMatchWitnesses(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>) reads Root : StringMatching.SM invokes StringMatching.<>initialize(DPJRuntime.DPJArrayInt<R>,int) where { R -> MW }, StringMatching.<>makeSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) where { Text -> Text, Pat -> Pat, PW -> PW, MW -> MW }
StringMatching.<>computePatternWitnesses(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) writes Root : StringMatching.SM invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayInt.put(int,int) where { this -> Wit : *, R -> Wit }, DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> Wit : *, R -> Wit }, DPJRuntime.DPJPartitionInt.get(int) where { this -> Wit : *, R -> Wit }, StringMatching.<>getNegIdx(DPJRuntime.DPJArrayInt<R>) where { R -> Wit }, StringMatching.<>initialize(DPJRuntime.DPJArrayInt<R>,int) where { R -> Wit }, StringMatching.<>makeSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) where { Text -> Pat, Pat -> Pat, PW -> Wit : *, MW -> Wit : * }, StringMatching.<>makeSparsePeriodic(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>,int,int,int) where { Pat -> Pat, Wit -> Wit }, StringMatching.<>periodCont(DPJRuntime.DPJArrayChar<Pat>,int,int) where { Pat -> Pat }, StringMatching.<>witness(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>) where { Text -> Pat, Pat -> Pat }
StringMatching.<>doDoubling(DPJRuntime.DPJSparseArray<java.lang.Integer, R1>,DPJRuntime.DPJSparseArray<java.lang.Integer, R2>,DPJRuntime.DPJArrayChar<Text>,int) reads Root : StringMatching.SM invokes DPJRuntime.DPJSet.iterator() where { this -> R1 : *, R -> R1 }, DPJRuntime.DPJSparseArray.get(int) where { this -> R1 : *, R -> R1 }, DPJRuntime.DPJSparseArray.nonZeroIndices() where { this -> R1 : *, R -> R1 }, DPJRuntime.DPJSparseArray.put(int,T) where { this -> R2 : *, R -> R2 }
StringMatching.<>duel(int,int,DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>) invokes DPJRuntime.DPJArrayChar.get(int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayChar.get(int) where { this -> Text : *, R -> Text }, DPJRuntime.DPJArrayInt.get(int) where { this -> PW : *, R -> PW }, DPJRuntime.DPJArrayInt.put(int,int) where { this -> MW : *, R -> MW }
StringMatching.<>getCandidate(DPJRuntime.DPJArrayInt<R>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> R : *, R -> R }
StringMatching.<>getCandidates(DPJRuntime.DPJArrayInt<R2>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> R2 : *, R -> R2 }
StringMatching.<>getNegIdx(DPJRuntime.DPJArrayInt<R>) invokes DPJRuntime.DPJArrayInt.get(int) where { this -> R : *, R -> R }
StringMatching.<>initialize(DPJRuntime.DPJArrayInt<R>,int) invokes DPJRuntime.DPJArrayInt.put(int,int) where { this -> R : *, R -> R }
StringMatching.<>makeKSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) invokes DPJRuntime.DPJPartitionInt.<>stridedPartition(DPJRuntime.DPJArrayInt<R>,int) where { this -> Root : *, R -> Root, R -> MW }, DPJRuntime.DPJPartitionInt.get(int) where { this -> MW : *, R -> MW }, StringMatching.<>duel(int,int,DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>) where { Text -> Text, Pat -> Pat, PW -> PW, MW -> MW : * }, StringMatching.<>getCandidates(DPJRuntime.DPJArrayInt<R2>) where { R1 -> Local : [?] : *, R2 -> MW : * }, java.lang.Integer.intValue() where { this -> Root : * }
StringMatching.<>makeSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) invokes StringMatching.<>makeKSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) where { Text -> Text, Pat -> Pat, PW -> PW, MW -> MW }
StringMatching.<>makeSparsePeriodic(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>,int,int,int) invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayInt.put(int,int) where { this -> Wit : *, R -> Wit }, DPJRuntime.DPJPartitionInt.get(int) where { this -> Wit : *, R -> Wit }, StringMatching.<>getCandidate(DPJRuntime.DPJArrayInt<R>) where { R -> Wit : * }, StringMatching.<>makeSparse(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>,int) where { Text -> Pat, Pat -> Pat, PW -> Wit : *, MW -> Wit : * }, StringMatching.<>witness(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>) where { Text -> Pat, Pat -> Pat }, StringMatching.modPrime(int,int)
StringMatching.<>match(DPJRuntime.DPJArrayChar<In>,DPJRuntime.DPJArrayChar<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) writes Root : StringMatching.SM invokes DPJRuntime.DPJUtils.log2(int) where { this -> Root : * }, StringMatching.<>computePatternWitnesses(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) where { Pat -> In, Wit -> Local : * }, StringMatching.<>matchAperiodic(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { Text -> In, Pat -> In, PW -> Local : *, Out -> Out }, StringMatching.<>matchPeriodic(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { Text -> In, Pat -> In, PW -> Local : *, Out -> Out }, StringMatching.<>pad(DPJRuntime.DPJArrayChar<Pat>) where { Pat -> In }
StringMatching.<>match(char[]<In>,char[]<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) invokes StringMatching.<>match(DPJRuntime.DPJArrayChar<In>,DPJRuntime.DPJArrayChar<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { In -> In, Out -> Out }
StringMatching.<>matchAperiodic(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJSet<java.lang.Integer, Out>) invokes DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> Local : *, R -> Local : * }, DPJRuntime.DPJSet.add(E) where { this -> Out : *, R -> Out }, StringMatching.<>checkSegment(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) where { Text -> Text, Pat -> Pat, Wit -> Local : * }, StringMatching.<>computeMatchWitnesses(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJArrayInt<MW>) where { Text -> Text, Pat -> Pat, PW -> PW, MW -> Local : * }
StringMatching.<>matchPeriodic(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJSet<java.lang.Integer, Out>) writes Root : StringMatching.SM invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayInt.subarray(int,int) where { this -> PW : *, R -> PW }, DPJRuntime.DPJSet.add(E) where { this -> Out : *, R -> Out }, DPJRuntime.DPJSet.iterator() where { this -> Local : *, R -> Local : * }, DPJRuntime.DPJSet.iterator() where { this -> Out : *, R -> Out }, DPJRuntime.DPJSparseArray.get(int) where { this -> Local : *, R -> Local : * }, DPJRuntime.DPJSparseArray.nonZeroIndices() where { this -> Local : *, R -> Local : * }, DPJRuntime.DPJSparseArray.put(int,T) where { this -> Local : *, R -> Local : * }, DPJRuntime.DPJUtils.log2(int) where { this -> Root : * }, StringMatching.<>doDoubling(DPJRuntime.DPJSparseArray<java.lang.Integer, R1>,DPJRuntime.DPJSparseArray<java.lang.Integer, R2>,DPJRuntime.DPJArrayChar<Text>,int) where { R1 -> Local : *, R2 -> Local : *, Text -> Text }, StringMatching.<>matchAperiodic(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<PW>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { Text -> Text, Pat -> Pat, PW -> PW, Out -> Out }, StringMatching.<>pad(DPJRuntime.DPJArrayChar<Pat>) where { Pat -> Pat }
StringMatching.<>pad(DPJRuntime.DPJArrayChar<Pat>) reads Root : StringMatching.SM invokes DPJRuntime.DPJArrayChar.get(int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayChar.put(int,char) where { this -> Pat : *, R -> Pat }
StringMatching.<>periodCont(DPJRuntime.DPJArrayChar<Pat>,int,int) reads Root : StringMatching.SM invokes DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> Pat : *, R -> Pat }, StringMatching.<>witness(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>) where { Text -> Pat, Pat -> Pat }
StringMatching.<>witness(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>) invokes DPJRuntime.DPJArrayChar.get(int) where { this -> Pat : *, R -> Pat }, DPJRuntime.DPJArrayChar.get(int) where { this -> Text : *, R -> Text }, DPJRuntime.DPJArrayChar.subarray(int,int) where { this -> Text : *, R -> Text }, DPJRuntime.DPJPartitionChar.get(int) where { this -> Pat : *, R -> Pat }, StringMatching.<>witness(DPJRuntime.DPJArrayChar<Text>,DPJRuntime.DPJArrayChar<Pat>) where { Text -> Text, Pat -> Pat : * }
StringMatching.StringMatching() invokes java.lang.Object.Object()
StringMatching.modPrime(int,int) pure
StringMatchingHarness.<T>AtoS(T[]) invokes java.lang.StringBuffer.append(java.lang.String) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * }
StringMatchingHarness.AtoSChar(char[]<Root : *>) invokes java.lang.StringBuffer.append(char) where { this -> Root : * }, java.lang.StringBuffer.toString() where { this -> Root : * }
StringMatchingHarness.StringMatchingHarness(java.lang.String[]) invokes Harness.Harness(java.lang.String,java.lang.String[],int,int)
StringMatchingHarness.initialize() writes Root, Root : StringMatchingHarness.Data invokes StringMatchingHarness.randomChar(int), java.lang.Math.random() where { this -> Root : * } overrides Harness.initialize()
StringMatchingHarness.main(java.lang.String[]) writes Root invokes Harness.run() where { this -> Root : * }, java.lang.Integer.parseInt(java.lang.String) where { this -> Root : * }
StringMatchingHarness.makePeriodicPattern(char[]<Root : *>,int,int,int,int) writes Root : * invokes StringMatchingHarness.randomChar(int)
StringMatchingHarness.randomChar(int) invokes java.lang.Math.random() where { this -> Root : * }
StringMatchingHarness.runTest() invokes StringMatchingHarness.testMatchPeriodic(), StringMatchingHarness.testMatchRandom(), StringMatchingHarness.testPWPeriodic(), StringMatchingHarness.testPWRandom() overrides Harness.runTest()
StringMatchingHarness.runWork() reads Root invokes StringMatching.<>match(char[]<In>,char[]<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { this -> Root : *, In -> Root : StringMatchingHarness.Data, Out -> Local } overrides Harness.runWork()
StringMatchingHarness.testCheckIdx(int) reads Root, Root : StringMatchingHarness.Data invokes java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.System.exit(int) where { this -> Root : * }
StringMatchingHarness.testMatchPeriodic() writes Root, Root : StringMatchingHarness.Data invokes DPJRuntime.DPJHashSet.iterator() where { this -> Local : *, R -> Local }, DPJRuntime.DPJIterator.hasNext() where { this -> Local : *, R -> Local }, DPJRuntime.DPJIterator.next() where { this -> Local : *, R -> Local }, StringMatching.<>match(char[]<In>,char[]<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { this -> Root : *, In -> Root : StringMatchingHarness.Data, Out -> Local }, StringMatchingHarness.AtoSChar(char[]<Root : *>), StringMatchingHarness.makePeriodicPattern(char[]<Root : *>,int,int,int,int), StringMatchingHarness.randomChar(int), StringMatchingHarness.testCheckIdx(int), java.io.PrintStream.print(java.lang.String) where { this -> Root : * }, java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.Math.random() where { this -> Root : * }, java.lang.System.exit(int) where { this -> Root : * }
StringMatchingHarness.testMatchRandom() writes Root, Root : StringMatchingHarness.Data invokes DPJRuntime.DPJHashSet.iterator() where { this -> Local : *, R -> Local }, DPJRuntime.DPJIterator.hasNext() where { this -> Local : *, R -> Local }, DPJRuntime.DPJIterator.next() where { this -> Local : *, R -> Local }, StringMatching.<>match(char[]<In>,char[]<In>,DPJRuntime.DPJSet<java.lang.Integer, Out>) where { this -> Root : *, In -> Root : StringMatchingHarness.Data, Out -> Local }, StringMatchingHarness.randomChar(int), StringMatchingHarness.testCheckIdx(int), java.io.PrintStream.print(java.lang.String) where { this -> Root : * }, java.io.PrintStream.println(java.lang.String) where { this -> Root : * }, java.lang.Math.random() where { this -> Root : * }
StringMatchingHarness.testPWPeriodic() reads Root writes Root : StringMatching.SM invokes DPJRuntime.DPJUtils.log2(int) where { this -> Root : * }, StringMatching.<>computePatternWitnesses(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) where { this -> Root : *, Pat -> Root : StringMatchingHarness.Data, Wit -> Local }, StringMatchingHarness.makePeriodicPattern(char[]<Root : *>,int,int,int,int), java.io.PrintStream.print(java.lang.String) where { this -> Root : * }, java.io.PrintStream.println(java.lang.String) where { this -> Root : * }
StringMatchingHarness.testPWRandom() reads Root writes Root : StringMatching.SM, Root : StringMatchingHarness.Data invokes DPJRuntime.DPJArrayInt.get(int) where { this -> Local : *, R -> Local }, DPJRuntime.DPJUtils.log2(int) where { this -> Root : * }, StringMatching.<>computePatternWitnesses(DPJRuntime.DPJArrayChar<Pat>,DPJRuntime.DPJArrayInt<Wit>) where { this -> Root : *, Pat -> Root : StringMatchingHarness.Data, Wit -> Local }, StringMatchingHarness.randomChar(int), java.io.PrintStream.print(java.lang.String) where { this -> Root : * }, java.io.PrintStream.println(java.lang.String) where { this -> Root : * }
StringMatchingHarness.usage() reads Root invokes java.io.PrintStream.println(java.lang.String) where { this -> Root : * } overrides Harness.usage()
